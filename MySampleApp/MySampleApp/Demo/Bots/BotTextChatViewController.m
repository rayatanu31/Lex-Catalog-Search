//
//  BotTextChatViewController.m
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-objc v0.20
//

#import "BotTextChatViewController.h"
#import "AWSLex/AWSLex.h"
#import "AWSConfiguration.h"
#import <AWSMobileHubHelper/AWSMobileHubHelper.h>

#define CLIENT_SENDER_ID @"client"
#define SERVER_SENDER_ID @"server"

@interface BotTextChatViewController() <AWSLexMicrophoneDelegate, AWSLexInteractionDelegate>

@property (nonatomic, readwrite) NSString *botName;
@property (nonatomic, readwrite) NSString *botAlias;
@property (nonatomic, readwrite) AWSRegionType botRegion;
@property (nonatomic, strong) NSMutableArray *messages;
@property (nonatomic, strong) AWSLexInteractionKit *interactionKit;
@property (nonatomic, strong) NSDictionary *sessionAttributes;
@property (strong, nonatomic) JSQMessagesBubbleImage *outgoingBubbleImageData;
@property (strong, nonatomic) JSQMessagesBubbleImage *incomingBubbleImageData;
@property (strong, nonatomic) JSQMessagesAvatarImage *clientImage;
@property (strong, nonatomic) JSQMessagesAvatarImage *serverImage;

@end

@implementation BotTextChatViewController {
    NSUInteger speechIndex;
    AWSTaskCompletionSource *textModeSwitchingCompletion;
}

-(void)viewDidLoad {
    [super viewDidLoad];
    
    // setup service configuration for bots
    AWSServiceConfiguration *serviceConfiguration = [[AWSServiceConfiguration alloc] initWithRegion:self.botRegion credentialsProvider: [AWSIdentityManager defaultIdentityManager].credentialsProvider];
    // setup interaction kit configuration
    AWSLexInteractionKitConfig *interactionConfig = [AWSLexInteractionKitConfig defaultInteractionKitConfigWithBotName:self.botName botAlias:self.botAlias];
    
    // disable automatic voice playback for text demo
    interactionConfig.autoPlayback = NO;
    
    // register the interaction kit client
    [AWSLexInteractionKit registerInteractionKitWithServiceConfiguration:serviceConfiguration interactionKitConfiguration:interactionConfig forKey:self.botName];
    // fetch and set the interaction kit client
    self.interactionKit = [AWSLexInteractionKit interactionKitForKey:self.botName];
    // set the interaction kit delegate
    self.interactionKit.interactionDelegate = self;
    
    // setup JSQMessagesViewController configuration
    self.showLoadEarlierMessagesHeader = NO;
    self.inputToolbar.contentView.textView.keyboardType = UIKeyboardTypeDefault;
    self.messages = [NSMutableArray new];
    JSQMessagesBubbleImageFactory *bubbleFactory = [[JSQMessagesBubbleImageFactory alloc] init];
    self.outgoingBubbleImageData = [bubbleFactory outgoingMessagesBubbleImageWithColor:[UIColor jsq_messageBubbleLightGrayColor]];
    self.incomingBubbleImageData = [bubbleFactory incomingMessagesBubbleImageWithColor:[UIColor jsq_messageBubbleBlueColor]];
    self.inputToolbar.contentView.leftBarButtonItem = nil;
    
    // Initialize avatars for client and server
    _clientImage = [[JSQMessagesAvatarImageFactory new] avatarImageWithImage:[UIImage imageNamed:@"UserIconBots"]];
    _serverImage = [[JSQMessagesAvatarImageFactory new] avatarImageWithImage:[UIImage imageNamed:@"BotsServerIcon"]];
}

#pragma mark - JSQMessagesViewController delegate methods

- (void)didPressSendButton:(UIButton *)button
           withMessageText:(NSString *)text
                  senderId:(NSString *)senderId
         senderDisplayName:(NSString *)senderDisplayName
                      date:(NSDate *)date {
    JSQMessage *message = [[JSQMessage alloc] initWithSenderId:senderId
                                             senderDisplayName:senderDisplayName
                                                          date:date
                                                          text:text];
    
    [self.messages addObject:message];
    
    if(textModeSwitchingCompletion){
        [textModeSwitchingCompletion setResult:text];
        textModeSwitchingCompletion = nil;
    }else{
        [self.interactionKit textInTextOut:text];
    }
    [self finishSendingMessageAnimated:YES];
}

- (NSString *)senderDisplayName {
    return @"Joe";
}

- (NSString *)senderId {
    return CLIENT_SENDER_ID;
}

- (id<JSQMessageData>)collectionView:(JSQMessagesCollectionView *)collectionView messageDataForItemAtIndexPath:(NSIndexPath *)indexPath {
    return [self.messages objectAtIndex:indexPath.item];
}


- (void)collectionView:(JSQMessagesCollectionView *)collectionView didDeleteMessageAtIndexPath:(NSIndexPath *)indexPath {
    //DO NOTHING
}

- (id<JSQMessageBubbleImageDataSource>)collectionView:(JSQMessagesCollectionView *)collectionView messageBubbleImageDataForItemAtIndexPath:(NSIndexPath *)indexPath {
    JSQMessage *message = [self.messages objectAtIndex:indexPath.item];
    
    if ([message.senderId isEqualToString:self.senderId]) {
        return self.outgoingBubbleImageData;
    }
    
    return self.incomingBubbleImageData;
}

- (id<JSQMessageAvatarImageDataSource>)collectionView:(JSQMessagesCollectionView *)collectionView avatarImageDataForItemAtIndexPath:(NSIndexPath *)indexPath {
    
    JSQMessage *message = self.messages[indexPath.item];
    if([message.senderId isEqualToString:CLIENT_SENDER_ID]) {
        return self.clientImage;
    }
    return self.serverImage;
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return [self.messages count];
}

- (UICollectionViewCell *)collectionView:(JSQMessagesCollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    JSQMessagesCollectionViewCell *cell = (JSQMessagesCollectionViewCell *)[super collectionView:collectionView cellForItemAtIndexPath:indexPath];
    
    JSQMessage *message = [self.messages objectAtIndex:indexPath.item];
    
    if (!message.isMediaMessage) {
        
        if ([message.senderId isEqualToString:self.senderId]) {
            cell.textView.textColor = [UIColor blackColor];
        } else {
            cell.textView.textColor = [UIColor whiteColor];
        }
        
        cell.textView.linkTextAttributes = @{ NSForegroundColorAttributeName : cell.textView.textColor,
                                              NSUnderlineStyleAttributeName : @(NSUnderlineStyleSingle | NSUnderlinePatternSolid) };
    }
    
    return cell;
}

- (NSAttributedString *)collectionView:(JSQMessagesCollectionView *)collectionView attributedTextForCellTopLabelAtIndexPath:(NSIndexPath *)indexPath {
    JSQMessage *message = [self.messages objectAtIndex:indexPath.item];
    return [[JSQMessagesTimestampFormatter sharedFormatter] attributedTimestampForDate:message.date];
}

- (NSAttributedString *)collectionView:(JSQMessagesCollectionView *)collectionView attributedTextForMessageBubbleTopLabelAtIndexPath:(NSIndexPath *)indexPath {
    JSQMessage *message = [self.messages objectAtIndex:indexPath.item];
    
    //iOS7-style sender name labels 
    if ([message.senderId isEqualToString:self.senderId]) {
        return nil;
    }
    
    if (indexPath.item - 1 > 0) {
        JSQMessage *previousMessage = [self.messages objectAtIndex:indexPath.item - 1];
        if ([[previousMessage senderId] isEqualToString:message.senderId]) {
            return nil;
        }
    }
    
    // Don't specify attributes to use the defaults.
    return [[NSAttributedString alloc] initWithString:message.senderDisplayName];
}

- (NSAttributedString *)collectionView:(JSQMessagesCollectionView *)collectionView attributedTextForCellBottomLabelAtIndexPath:(NSIndexPath *)indexPath {
    return nil;
}

- (BOOL)composerTextView:(JSQMessagesComposerTextView *)textView shouldPasteWithSender:(id)sender {
    return YES;
}
#pragma mark -

#pragma mark - InteractionKit

- (void)interactionKit:(AWSLexInteractionKit *)interactionKit
               onError:(NSError *)error {
    NSLog(@"error occured %@", error);
}

- (void)interactionKit:(AWSLexInteractionKit *)interactionKit
       switchModeInput:(AWSLexSwitchModeInput *)switchModeInput
      completionSource:(AWSTaskCompletionSource<AWSLexSwitchModeResponse *> *)completionSource {
    
    self.sessionAttributes = switchModeInput.sessionAttributes;
    
    dispatch_async(dispatch_get_main_queue(), ^{
        JSQMessage *message = nil;
        // Handle a successful fulfillment
        if (switchModeInput.dialogState == AWSLexDialogStateReadyForFulfillment) {
            // Currently just displaying the slots returned on ready for fulfillment
            if (switchModeInput.slots) {
                message = [[JSQMessage alloc] initWithSenderId:SERVER_SENDER_ID
                                             senderDisplayName:@""
                                                          date:[[NSDate alloc]init]
                                                          text:[NSString stringWithFormat:@"Slots:\n%@", switchModeInput.slots]];
                [self.messages addObject:message];
                [self finishSendingMessageAnimated:YES];
            }
        } else {
            message = [[JSQMessage alloc] initWithSenderId:SERVER_SENDER_ID
                                         senderDisplayName:@""
                                                      date:[[NSDate alloc]init]
                                                      text:switchModeInput.outputText];
            if ([message.text containsString:@".jpg"]){
                NSString *appendedWithS3BaseURL = [message.text stringByReplacingOccurrencesOfString:@"ndtv" withString:@"https://s3-us-west-2.amazonaws.com/ai-demo-in/ndtv"];
                [message setValue:appendedWithS3BaseURL forKey:@"text"];
            }

            [self.messages addObject:message];
            [self finishSendingMessageAnimated:YES];
        }
    });
    
    //this can expand to take input from user.
    AWSLexSwitchModeResponse *switchModeResponse = [AWSLexSwitchModeResponse new];
    [switchModeResponse setInteractionMode:AWSLexInteractionModeText];
    [switchModeResponse setSessionAttributes:switchModeInput.sessionAttributes];
    [completionSource setResult:switchModeResponse];
    
}

/*
 * Sent to delegate when the Switch mode requires a user to input a text. You should set the completion source result to the string that you get from the user. This ensures that the session attribute information is carried over from the previous request to the next one.
 */
- (void)interactionKitContinueWithText:(AWSLexInteractionKit *)interactionKit
                      completionSource:(AWSTaskCompletionSource<NSString *> *)completionSource {
    textModeSwitchingCompletion = completionSource;
}
#pragma mark -

@end
